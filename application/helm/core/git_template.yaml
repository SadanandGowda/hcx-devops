---
# Source: hcx-registry/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: hcx-registry
  labels:
    helm.sh/chart: hcx-registry-0.1.0
    app.kubernetes.io/name: hcx-registry
    app.kubernetes.io/instance: hcx-registry
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: hcx-registry/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: registryschemas
data:
  Organisation.json: |-
    {
      "$schema":"http://json-schema.org/draft-07/schema",
      "type":"object",
      "properties":{
          "Organisation":{
            "$ref":"#/definitions/Organisation"
          }
      },
      "required":[
          "Organisation"
      ],
      "title":"Organisation",
      "definitions":{
          "Organisation":{
            "$id":"#/definitions/Organisation",
            "type":"object",
            "title":"The Organisation Schema",
            "required":[
                "participantCode",
                "participantName",
                "roles",
                "mobile",
                "status",
                "encryptionCert",
                "endpointUrl"
            ],
            "properties":{
                "participantCode":{
                  "type":"string"
                },
                "hfrCode":{
                  "type":"string"
                },
                "participantName":{
                  "type":"string"
                },
                "roles":{
                  "type":"string"
                },
                "address":{
                  "$ref":"#/definitions/Address"
                },
                "email":{
                  "type":"array",
                  "items":{
                      "type":"string",
                      "format":"email"
                  },
                  "maxItems":3
                },
                "phone":{
                  "type":"array",
                  "items":{
                      "type":"string"
                  },
                  "maxItems":3
                },
                "mobile":{
                  "type":"array",
                  "items":{
                      "type":"string"
                  },
                  "minItems":1,
                  "maxItems":3
                },
                "status":{
                  "type":"string",
                  "enum":[
                      "Created",
                      "Active",
                      "Inactive",
                      "Blocked"
                  ]
                },
                "signingCertPath":{
                  "type":"string",
                  "format":"uri"
                },
                "encryptionCert":{
                  "type":"string",
                  "format":"uri"
                },
                "endpointUrl":{
                  "type":"string",
                  "format":"url"
                },
                "paymentDetails":{
                  "$ref":"#/definitions/paymentDetails"
                }
            }
          },
          "Address":{
            "title": "Address",
            "type":"object",
            "required":[

            ],
            "properties":{
                "plot":{
                  "type":"string"
                },
                "street":{
                  "type":"string"
                },
                "landmark":{
                  "type":"string"
                },
                "locality":{
                  "type":"string"
                },
                "village":{
                  "type":"string"
                },
                "district":{
                  "type":"string"
                },
                "state":{
                  "type":"string"
                },
                "pincode":{
                  "type":"string"
                }
            }
          },
          "paymentDetails":{
            "title": "PaymentDetails",
            "type":"object",
            "required":[

            ],
            "properties":{
                "upiId":{
                  "type":"string"
                },
                "accountNumber":{
                  "type":"string"
                },
                "ifscCode":{
                  "type":"string"
                }
            },
            "oneOf":[
                {
                  "required":[
                      "upiId"
                  ]
                },
                {
                  "required":[
                      "accountNumber",
                      "ifscCode"
                  ]
                }
            ]
          }
      },
      "_osConfig":{
          "ownershipAttributes": [
            {
                "email": "/participantName",
                "mobile": "/participantName",
                "userId": "/participantCode"
            }
          ],
          "uniqueIndexFields":[
            "participantName",
            "participantCode"
          ],
          "subjectJsonPath": "participantName"
      }
    }
  User.json: |-
    {
      "$schema":"http://json-schema.org/draft-07/schema",
      "type":"object",
      "properties":{
        "User":{
          "$ref":"#/definitions/User"
        }
      },
      "required":[
        "User"
      ],
      "title":"User",
      "definitions":{
        "User":{
          "$id":"#/definitions/User",
          "type":"object",
          "title":"The User Schema",
          "required":[
            "userId",
            "userName",
            "roles",
            "tenant",
            "organisationDetails"
          ],
          "properties":{
            "userId":{
              "type":"string"
            },
            "userName":{
              "type":"string"
            },
            "pin":{
              "type":"string"
            },
            "mobile":{
              "type":"string"
            },
            "email":{
              "type":"string",
              "format":"email"
            },
            "roles":{
              "type":"string"
            },
            "tenant":{
              "type":"string"
            },
            "linkedUserId":{
              "type":"string"
            },
            "organisationDetails":{
              "$ref":"#/definitions/organisationDetails"
            }
          }
        },
        "organisationDetails":{
          "title":"organisationDetails",
          "type":"object",
          "required":[
            "organisationName",
            "organisationOSID"
          ],
          "properties":{
            "organisationName":{
              "type":"string"
            },
            "organisationOSID":{
              "type":"string"
            }
          }
        }
      },
      "_osConfig":{
        "ownershipAttributes":[
          {
            "email":"/email",
            "mobile":"/mobile",
            "userId":"/userId"
          }
        ],
        "uniqueIndexFields":[
          "userId"
        ],
        "subjectJsonPath":"userId",
        "attestationAttributes": [
          "organisationDetails"
        ],
        "attestationPolicies":[
          {
            "property": "organisationDetails",
            "paths": [
              "organisationDetails"
            ],
            "attestorEntity": "Organisation",
            "conditions": "(ATTESTOR#$.osid#.contains(REQUESTER#$.organisationOSID#) && ATTESTOR#$.participantName#.contains(REQUESTER#$.organisationName#))"
          }
        ]
      }
    }
---
# Source: hcx-registry/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: hcx-registry
  labels:
    helm.sh/chart: hcx-registry-0.1.0
    app.kubernetes.io/name: hcx-registry
    app.kubernetes.io/instance: hcx-registry
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: LoadBalancer
  ports:
    - port: 8081
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: hcx-registry
    app.kubernetes.io/instance: hcx-registry
---
# Source: hcx-registry/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hcx-registry
  labels:
    helm.sh/chart: hcx-registry-0.1.0
    app.kubernetes.io/name: hcx-registry
    app.kubernetes.io/instance: hcx-registry
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: hcx-registry
      app.kubernetes.io/instance: hcx-registry
  template:
    metadata:
      labels:
        app.kubernetes.io/name: hcx-registry
        app.kubernetes.io/instance: hcx-registry
    spec:
      serviceAccountName: hcx-registry
      securityContext:
        {}
      containers:
        - name: hcx-registry
          env:
          - name: HCX_API_BASEPATH
            value: 'http://hcx-api.dev.svc.cluster.local:8080'
          - name: REDIS_HOST
            value: 'redis-master.dev.svc.cluster.local'
          - name: REGISTRY_BASE_PATH
            value: 'http://hcx-registry.dev.svc.cluster.local:8081'
          - name: REGISTRY_HCX_CODE
            value: ''
          - name: api_version
            value: 'v0.7'
          - name: audit_alias
            value: 'hcx_audit'
          - name: audit_index
            value: 'hcx_audit'
          - name: base_url
            value: 'http://dev-hcx.swasth.app/api'
          - name: demo_app_port
            value: '8000'
          - name: docker_repo
            value: 'swasth2021'
          - name: email
            value: 'swasthmockpayordev@gmail.com'
          - name: env
            value: 'dev'
          - name: es_host
            value: '10.0.1.18'
          - name: gateway_not_allowed_urls
            value: 'http://dev-hcx.swasth.app/api'
          - name: hcx_instance_name
            value: 'swasth-hcx-dev'
          - name: hcx_password
            value: 'Opensaber@123'
          - name: hcx_upstream
            value: 'http://a851b026063934683964f22c6732f177-1969328968.ap-south-1.elb.amazonaws.com:8095/'
          - name: hcx_username
            value: 'swasthmockproviderdev@gmail.com'
          - name: kafka_host
            value: '10.0.1.196'
          - name: keycloak_postgresql_host
            value: 'terraform-20211111045938760100000001.culmyp72rbwi.ap-south-1.rds.amazonaws.com'
          - name: keycloak_postgresql_password
            value: 'SuperSecurePassword'
          - name: keycloak_postgresql_user
            value: 'hcxpostgresql'
          - name: recipient_code
            value: 'payor-swasth-mock-payor-dev'
          - name: registry_hcx_code
            value: 'hcx.gateway@swasth-hcx-dev'
          - name: registry_sso_url
            value: 'http://aef8101c432d04a659e6317b3e5031cf-1674586068.ap-south-1.elb.amazonaws.com:8080/auth'
          - name: sender_code
            value: 'provider-swasth-mock-provider-dev'
          - name: timestamp_range
            value: '10000'
          - name: token_url
            value: 'http://aef8101c432d04a659e6317b3e5031cf-1674586068.ap-south-1.elb.amazonaws.com:8080/auth/realms/swasth-health-claim-exchange/protocol/openid-connect/token'
          securityContext:
            {}
          image: "swasth2021/registry:40fc02e_10"
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 8081
              protocol: TCP
          args:
            - /bin/sh
            - -c
            - touch /tmp/healthy; sleep 30; rm -rf /tmp/healthy; sleep 600
          livenessProbe:
            exec:
              command:
              - ls 
              - -all
            initialDelaySeconds: 5
            periodSeconds: 5
          resources:
            limits:
              cpu: 500m
              memory: 1024Mi
            requests:
              cpu: 50m
              memory: 256Mi
          volumeMounts:
          - name: registryschemas
            mountPath: /home/opensaber/config/public/_schemas
      volumes:
      - name: registryschemas
        configMap:
          name: registryschemas
---
# Source: hcx-registry/templates/prometheus-rule.yaml
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  annotations:
    meta.helm.sh/release-name: monitoring
    meta.helm.sh/release-namespace: monitoring
    prometheus-operator-validated: "true"
  generation: 1
  labels:
    app: kube-prometheus-stack
    app.kubernetes.io/instance: monitoring
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kube-prometheus-stack
    app.kubernetes.io/version: 34.9.0
    chart: kube-prometheus-stack-34.9.0
    heritage: Helm
    release: monitoring
  name: monitoring-kube-prometheus-hcx-registry
  namespace: dev
spec:
  groups:
  - name: kubernetes-resources
    rules:
    - alert: KubeCPUOvercommit
      annotations:
        runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubecpuovercommit
        summary: Cluster has overcommitted CPU resource requests.
      expr: |-
        sum(namespace_cpu:kube_pod_container_resource_requests:sum{}) - (sum(kube_node_status_allocatable{resource="cpu"}) - max(kube_node_status_allocatable{resource="cpu"})) > 0
        and
        (sum(kube_node_status_allocatable{resource="cpu"}) - max(kube_node_status_allocatable{resource="cpu"})) > 0
      for: 10m
      labels:
        severity: warning
    - alert: KubeMemoryOvercommit
      annotations:
        runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubememoryovercommit
        summary: Cluster has overcommitted memory resource requests.
      expr: |-
        sum(namespace_memory:kube_pod_container_resource_requests:sum{}) - (sum(kube_node_status_allocatable{resource="memory"}) - max(kube_node_status_allocatable{resource="memory"})) > 0
        and
        (sum(kube_node_status_allocatable{resource="memory"}) - max(kube_node_status_allocatable{resource="memory"})) > 0
      for: 10m
      labels:
        severity: warning
    - alert: KubeCPUQuotaOvercommit
      annotations:
        description: Cluster has overcommitted CPU resource requests for Namespaces.
        runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubecpuquotaovercommit
        summary: Cluster has overcommitted CPU resource requests.
      expr: |-
        sum(min without(resource) (kube_resourcequota{job="kube-state-metrics", type="hard", resource=~"(cpu|requests.cpu)"}))
          /
        sum(kube_node_status_allocatable{resource="cpu", job="kube-state-metrics"})
          > 1.5
      for: 5m
      labels:
        severity: warning
    - alert: KubeMemoryQuotaOvercommit
      annotations:
        description: Cluster has overcommitted memory resource requests for Namespaces.
        runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubememoryquotaovercommit
        summary: Cluster has overcommitted memory resource requests.
      expr: |-
        sum(min without(resource) (kube_resourcequota{job="kube-state-metrics", type="hard", resource=~"(memory|requests.memory)"}))
          /
        sum(kube_node_status_allocatable{resource="memory", job="kube-state-metrics"})
          > 1.5
      for: 5m
      labels:
        severity: warning
    - alert: KubeQuotaAlmostFull
      annotations:
        runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubequotaalmostfull
        summary: Namespace quota is going to be full.
      expr: |-
        kube_resourcequota{job="kube-state-metrics", type="used"}
          / ignoring(instance, job, type)
        (kube_resourcequota{job="kube-state-metrics", type="hard"} > 0)
          > 0.9 < 1
      for: 15m
      labels:
        severity: info
    - alert: KubeQuotaFullyUsed
      annotations:
        runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubequotafullyused
        summary: Namespace quota is fully used.
      expr: |-
        kube_resourcequota{job="kube-state-metrics", type="used"}
          / ignoring(instance, job, type)
        (kube_resourcequota{job="kube-state-metrics", type="hard"} > 0)
          == 1
      for: 15m
      labels:
        severity: info
    - alert: KubeQuotaExceeded
      annotations:
        runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubequotaexceeded
        summary: Namespace quota has exceeded the limits.
      expr: |-
        kube_resourcequota{job="kube-state-metrics", type="used"}
          / ignoring(instance, job, type)
        (kube_resourcequota{job="kube-state-metrics", type="hard"} > 0)
          > 1
      for: 15m
      labels:
        severity: warning
    - alert: CPUThrottlingHigh
      annotations:
        runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/cputhrottlinghigh
        summary: Processes experience elevated CPU throttling.
      expr: |-
        sum(increase(container_cpu_cfs_throttled_periods_total{container!="", }[5m])) by (container, pod, namespace)
          /
        sum(increase(container_cpu_cfs_periods_total{}[5m])) by (container, pod, namespace)
          > ( 25 / 100 )
      for: 15m
      labels:
        severity: info
---
# Source: hcx-registry/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "hcx-registry-test-connection"
  labels:
    helm.sh/chart: hcx-registry-0.1.0
    app.kubernetes.io/name: hcx-registry
    app.kubernetes.io/instance: hcx-registry
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['hcx-registry:8081']
  restartPolicy: Never
